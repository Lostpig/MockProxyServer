#!/usr/bin/env node

'use strict'

const fs = require('fs')
const path = require('path')
const MockProxyServer = require('../server/server')
const logger = require('../server/logger')
const argv = require('optimist').boolean('cors').argv

const pkg = require('../package.json')
const ROOTPATH = process.cwd()

if (argv.help || argv.h) {
  console.log([
    'usage: moproxy [remoteAddress] [options]',
    '-p [port]        Port to use, default is 8998',
    '-l [pattern]     local files glob pattern, default is [**/*.js, **/*.css, **/*.html]',
    '-d [directory]   root directory path, default is "."',
    '--cors           is enable CORS, default is false',
    '--https          is remote server use https, default is false',
    '--proxy          start server at proxy mode, default is false',
    '-c [path]        config json file to use, press "-c help" to view config content'
  ].join('\n'))
  process.exit()
}
if (argv.version || argv.v) {
  logger.normal('moproxy-server version ' + pkg.version)
  process.exit()
}
if (argv.c && typeof argv.c === 'string' && argv.c.trim() === 'help') {
  console.log([
    '{',
    '  remote      : [string]           required, remote server host',
    '  port        : [number]           local server port, default is 8998',
    '  directory   : [string]           root directory path, default is "."',
    '  localFiles  : [array]            local files glob pattern, default is [**/*.js, **/*.css, **/*.html]',
    '  redirectPath: [array]            redirect path to local file, default is []',
    '                                   e.g [{ path: "/", file: "dist/index.html" }] ',
    '  cors        : [boolean]          is enable CORS, default is false',
    '  remoteHttps : [boolean]          is remote server use https, default is false',
    '  proxyMode   : [boolean]          start server at proxy mode, default is false, open when use CAS/SSO ',
    '                                   (maybe you need set plugin on browser)',
    '}'
  ].join('\n'))
  process.exit()
}


if (!argv._[0] && !argv.c) {
  logger.error('remote address or config file is required')
  process.exit()
}

const cliConfig = {
  remote: argv._[0],
  port: argv.p,
  directory: argv.d,
  localFiles: argv.l ? argv.l.trim().split(',') : null,
  remoteHttps: !!argv.https,
  proxyMode: !!argv.proxy,
  cors: !!argv.cors
}
let configPath
if (argv.c && typeof argv.c === 'string') {
  configPath = argv.c.trim()
}

let config
if (configPath) {
  configPath = path.resolve(ROOTPATH, configPath)
  const isExist = fs.existsSync(configPath)
  if (!isExist) {
    logger.error('config file not exist')
    process.exit()
  } else {
    if (configPath.endsWith('.js')) {
      config = require(configPath)
    } else {
      const configStr = fs.readFileSync(configPath)
      config = JSON.parse(configStr)
    }
  }
} else {
  config = {}

  ;['remote', 'port', 'directory', 'localFiles', 'remoteHttps', 'cors', 'proxyMode'].forEach(n => {
    if (!config.hasOwnProperty(n) && cliConfig[n]) {
      config[n] = cliConfig[n]
    }
  })
}
if (!config.proxyMode) {
  config.openBrowser = typeof config.openBrowser === 'undefined' ? true : config.openBrowser
}


new MockProxyServer(config)

if (process.platform === 'win32') {
  require('readline').createInterface({
    input: process.stdin,
    output: process.stdout
  }).on('SIGINT', function () {
    process.emit('SIGINT')
  })
}

process.on('SIGINT', function () {
  logger.error('server stopped.')
  process.exit()
})

process.on('SIGTERM', function () {
  logger.error('server stopped.')
  process.exit()
})



